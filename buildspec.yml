version: 0.2
env:
  variables:
    AWS_Region: "ap-south-1"
    AWS_AccountId: "051087528164"
    #Sonar_Project: "SRE-Demo"
  #secrets-manager:
    #Sonar_AccessToken: SRE_Secrets:Sonar_AccessToken
    #Sonar_Host: SRE_Secrets:Sonar_Host  
phases:
    install:
        commands:
            # installation commands
            - echo installing Java...
            - apt-get update -y
            - apt-get install -y openjdk-17-jdk
            - apt-get install -y openjdk-17-jre
            - echo installing maven...
            - apt-get update -y
            - apt-get install -y maven
            - echo Building the Jar file ...
            - mvn install
            - echo @@ Install Sonar-Scanner
            - wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
            - unzip sonar-scanner-cli-4.7.0.2747-linux.zip
            - mv sonar-scanner-4.7.0.2747-linux /var/opt
            - export PATH="$PATH:/var/opt/sonar-scanner-4.7.0.2747-linux/bin"
            - sonar-scanner -v
            - $$$$ echo sending the analysis to Sonarqube server ...
            - sonar-scanner -Dsonar.login=sqa_c8161f4ac2bd4e92e0cb6ea52e7a2ad97e6a9ab2 -Dsonar.host.url=http://43.205.242.208:9000 -Dsonar.sources=src -Dsonar.java.binaries=target/classes -Dsonar.projectKey=studentkey -Dsonar.projectName=studentapi
            #- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install
            #- mvn sonar:sonar -Dsonar.host.url=http://43.205.209.112:9000/ -Dsonar.login=sqa_c8161f4ac2bd4e92e0cb6ea52e7a2ad97e6a9ab2
    pre_build:
        commands:
            #- echo Restore started on `date`
            #- dotnet restore ClassroomApp.csproj
            - echo Logging in to Amazon ECR...
            - aws --version
            - aws ecr get-login-password --region $AWS_Region | docker login --username AWS --password-stdin $AWS_AccountId.dkr.ecr.$AWS_Region.amazonaws.com
            - REPOSITORY_URI=$AWS_AccountId.dkr.ecr.$AWS_Region.amazonaws.com/sre-java-app
            - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
            - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
            #- dotnet tool install --global dotnet-sonarscanner
            #- dotnet tool install --global dotnet-coverage
    build:
        commands:
            - echo Build started on `date`
            #- dotnet restore
            # Start - Sonar Quality Scanning
            # - dotnet sonarscanner begin /k:"SRE-Demo" /d:sonar.host.url=$Sonar_Host
            #         /d:sonar.cs.xunit.reportsPaths="artifacts/xunit/*.xml"
            #         /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml 
            #         /d:sonar.dotnet.excludeTestProjects=true
            #         /d:sonar.login=$Sonar_AccessToken
            #- dotnet build
            #- dotnet test
            # - dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
            # - dotnet sonarscanner end /d:sonar.login=$Sonar_AccessToken
            # End - Sonar Quality Scanning

            # Begin - Verify the Sonar Quality Check Status
            # - sleep 5 #let the sonar scan complete
            # - curl -u $Sonar_AccessToken:'' $Sonar_Host/api/qualitygates/project_status?projectKey=$Sonar_Project > result.json
            # - cat result.json            
            # - |
            #     if [ $(jq -r '.projectStatus.status' result.json) = OK ] ; then
            #         echo "in quality_status OK condition"  
            #     elif [ $(jq -r '.projectStatus.status' result.json) = ERROR ]; then
            #         echo "in quality_status ERROR or WARN condition"
            #         exit 1;                    
            #     fi
            # End - Verify the Sonar Quality Check Status

            #- dotnet publish --no-restore --output build_output            
            #- echo Building the Jar file ...
            #- mvn install
            #- $$$$ echo sending the analysis to Sonarqube server ...
            #- mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install
            #- mvn sonar:sonar -Dsonar.host.url=http://43.205.209.112:9000/ -Dsonar.login=sqa_c8161f4ac2bd4e92e0cb6ea52e7a2ad97e6a9ab2
            - echo Building the Docker image...
            - echo @@@@ REPOSITORY_URI $REPOSITORY_URI
            - echo @@@@ IMAGE_TAG $IMAGE_TAG
            - docker build -f ./Dockerfile -t $REPOSITORY_URI:latest .
            - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
    post_build:
        commands:
            - echo Build completed on `date`
            - echo Pushing the Docker image...
            - docker push $REPOSITORY_URI:latest
            - docker push $REPOSITORY_URI:$IMAGE_TAG
            # - echo Writing image definitions file...
            # - printf '[{"name":"ClassroomApp","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
            # - cat imagedefinitions.json 
artifacts:
  files:
    - target/*.jar
    #- ./build_output/**/*
    #- imagedefinitions.json
    #- scripts/**/*
    #- appspec.yml
